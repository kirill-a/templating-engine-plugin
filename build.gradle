plugins {
  id 'groovy'
  id 'org.jenkins-ci.jpi' version '0.50.0-rc.3'
  id 'jacoco'
  id "com.diffplug.spotless" version "6.20.0"
  id 'codenarc'
}

repositories {
    mavenCentral()
    maven {
        url('https://repo.jenkins-ci.org/public/')
    }
}

group = 'org.jenkins-ci.plugins'
version = '2.5.3'
description = 'Allows users to create tool-agnostic, templated pipelines to be shared by multiple teams'

jenkinsPlugin {
    jenkinsVersion.set('2.346.3')
    pluginId.set('templating-engine')
    humanReadableName.set('Templating Engine')
    homePage.set(uri('https://github.com/jenkinsci/templating-engine-plugin'))
    generateTests.set(true)
    configureRepositories = false
    configurePublishing = true
    developers {
        developer {
            id 'steven-terrana'
            name 'Steven Terrana'
            email 'terrana_steven@bah.com'
        }
        developer {
            id 'carlosokieffebah'
            name 'Carlos Okieffe'
            email 'okieffe_carlos@bah.com'
        }
    }
}

dependencies {
    // plugin dependencies
    implementation platform('io.jenkins.tools.bom:bom-2.387.x:2278.v47b_4508e256a')
    implementation 'org.jenkins-ci.plugins.workflow:workflow-multibranch'
    implementation 'org.jenkins-ci.plugins.workflow:workflow-api'
    implementation 'org.jenkins-ci.plugins:branch-api'
    implementation 'org.jenkins-ci.plugins:scm-api'
    implementation 'org.jenkins-ci.plugins:junit'
    implementation 'org.jenkins-ci.plugins:script-security'
    implementation 'org.jenkinsci.plugins:pipeline-model-definition'
    implementation 'org.jgrapht:jgrapht-core:1.4.0'
    implementation 'org.jenkins-ci.modules:sshd'

    // unit test dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.4'
    testImplementation 'net.bytebuddy:byte-buddy:1.10.7' // used by Spock
    testImplementation 'org.objenesis:objenesis:3.1'     // used by Spock
    testImplementation(group: 'org.jenkins-ci.plugins', name: 'git', classifier:'tests') {
        exclude(module: 'httpclient')
        exclude(module: 'annotation-indexer')
    }

    testImplementation(group: "org.jenkins-ci.main", name: "jenkins-test-harness", version: "1837.vb_6efb_1790942")

    // test plugins
    testImplementation(group: "org.jenkins-ci.plugins.workflow", name: "workflow-support", classifier: "tests")
    testImplementation(group: "org.jenkins-ci.plugins", name: "scm-api", version: "2.3.0", classifier: "tests")
    testImplementation(group: 'org.jenkins-ci.plugins', name: 'git', version:'4.7.1') {
        exclude(module: 'httpclient')
        exclude(module: 'annotation-indexer')
    }
    testImplementation 'org.jenkins-ci.plugins:token-macro'
    testImplementation 'org.jenkins-ci.plugins:matrix-project'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6'
    testImplementation 'org.jenkins-ci.plugins.workflow:workflow-step-api'
}

jacocoTestReport {
    reports {
        html.required.set(true)
    }
}

spotless{
    groovy{
        target = fileTree("src/main/groovy") + fileTree(dir: "src/main/resources", include: "**/*.groovy") + fileTree("src/test/groovy")
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
        licenseHeaderFile 'groovy.header'
    }
}

codenarc {
    toolVersion = '1.6.1'
    configFile = file('./config/codenarc/rules.groovy')

}

codenarcMain{
    source = fileTree("src/main/groovy") + fileTree(dir: "src/main/resources", include: "**/*.groovy")
}

codenarcTest{
    configFile = file('./config/codenarc/rulesTest.groovy')
}

task codenarc {
    description = "Evaluate code against CodeNarc"
    dependsOn = [ 'codenarcMain', 'codenarcTest' ]
}

sourceSets {
    main{
        java{
            srcDirs = []
        }
        groovy {
            srcDirs = ["src/main/groovy", "src/main/java"]
            exclude "**/package-info.groovy"
        }
    }
}

groovydoc{
    source fileTree("src/main/groovy")
}

/**
 * this is necessary so that the groovydocs show up as the javadocs
 * on the jenkins plugin site
 */
task javadocJar(type: Jar) {
    description "An archive of the JavaDocs for Maven Central"
    archiveClassifier.set("javadoc")
    from groovydoc
}

tasks.register('printJTEVersion'){
  doLast{
    println version
  }
}
